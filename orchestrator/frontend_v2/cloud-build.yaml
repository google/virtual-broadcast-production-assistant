# This file defines the continuous integration and deployment pipeline for the frontend application.
# It is used by Google Cloud Build to automatically build, test, and deploy the application.

steps:
  # 1. Install npm dependencies
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Install dependencies'
    entrypoint: 'npm'
    args: ['install']
    dir: 'orchestrator/frontend_v2'

  # 2. Run linting
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run linting'
    entrypoint: 'npm'
    args: ['run', 'lint']
    dir: 'orchestrator/frontend_v2'

  # 3. Run tests
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Run tests'
    entrypoint: 'npm'
    args: ['test']
    dir: 'orchestrator/frontend_v2'
    env:
      - 'VITE_FIREBASE_API_KEY=$_VITE_FIREBASE_API_KEY'
      - 'VITE_FIREBASE_AUTH_DOMAIN=$_VITE_FIREBASE_AUTH_DOMAIN'
      - 'VITE_FIREBASE_PROJECT_ID=$_VITE_FIREBASE_PROJECT_ID'
      - 'VITE_FIREBASE_STORAGE_BUCKET=$_VITE_FIREBASE_STORAGE_BUCKET'
      - 'VITE_FIREBASE_MESSAGING_SENDER_ID=$_VITE_FIREBASE_MESSAGING_SENDER_ID'
      - 'VITE_FIREBASE_APP_ID=$_VITE_FIREBASE_APP_ID'

  # 4. Build the static assets with Vite
  - name: 'gcr.io/cloud-builders/npm'
    id: 'Build static assets'
    entrypoint: 'npm'
    args: ['run', 'build']
    dir: 'orchestrator/frontend_v2'
    env:
      - 'VITE_WEBSOCKET_URL=$_VITE_WEBSOCKET_URL'
      - 'VITE_FIREBASE_API_KEY=$_VITE_FIREBASE_API_KEY'
      - 'VITE_FIREBASE_AUTH_DOMAIN=$_VITE_FIREBASE_AUTH_DOMAIN'
      - 'VITE_FIREBASE_PROJECT_ID=$_VITE_FIREBASE_PROJECT_ID'
      - 'VITE_FIREBASE_STORAGE_BUCKET=$_VITE_FIREBASE_STORAGE_BUCKET'
      - 'VITE_FIREBASE_MESSAGING_SENDER_ID=$_VITE_FIREBASE_MESSAGING_SENDER_ID'
      - 'VITE_FIREBASE_APP_ID=$_VITE_FIREBASE_APP_ID'

  # 5. Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker image'
    dir: 'orchestrator/frontend_v2'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/frontend-v2/app:${COMMIT_SHA}'
      - '.'

  # 6. Push the Docker image to Google Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Docker image'
    dir: 'orchestrator/frontend_v2'
    args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/frontend-v2/app:${COMMIT_SHA}']

  # 7. Create a Cloud Deploy release
  # This step creates a new release in the 'frontend-v2-delivery' pipeline.
  # This will trigger a deployment to the first stage of the pipeline (staging).
  - name: 'gcr.io/google-appengine/exec-wrapper'
    id: 'Create Cloud Deploy release'
    entrypoint: '/bin/bash'
    args:
    - -c
    - |
      gcloud deploy releases create "release-$SHORT_SHA" \
        --delivery-pipeline="frontend-v2-delivery" \
        --region="${_REGION}" \
        --source="." \
        --images="frontend-v2-image=${_REGION}-docker.pkg.dev/$PROJECT_ID/frontend-v2/app:${COMMIT_SHA}"
    dir: 'orchestrator/frontend_v2'


# Store the final image in Artifact Registry.
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/frontend-v2/app:${COMMIT_SHA}'

# Configure build options to resolve potential logging permission issues.
# This instructs Cloud Build to send logs directly to Cloud Logging.
options:
  logging: CLOUD_LOGGING_ONLY

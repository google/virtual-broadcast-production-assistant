"""A collection of tools for interacting with Firestore."""

import json
from datetime import datetime, timezone
from google.adk.tools.tool_context import ToolContext
import firebase_admin
from firebase_admin import firestore_async

# Initialize Firebase Admin SDK
# A check is included to prevent re-initialization in a hot-reload environment
if not firebase_admin._apps:
    firebase_admin.initialize_app()

async def save_timeline_event(event_data: str, tool_context: ToolContext) -> str:
    """
    Saves a structured JSON event to the timeline_events collection in Firestore.

    Args:
        event_data: A JSON string representing the event to save.
        tool_context: The context of the tool call, used to get user_id and session_id.

    Returns:
        A string indicating the result of the operation.
    """
    print(f"Save timeline event tool called with data: {event_data}")

    try:
        # Parse the JSON string
        structured_data = json.loads(event_data)

        # Get user_id and session_id from the context
        user_id = tool_context.state.get("user_id", "unknown_user")
        session_id = tool_context.state.get("session_id", "unknown_session")

        # Add metadata to the structured data
        structured_data['user_id'] = user_id
        structured_data['session_id'] = session_id
        structured_data['timestamp'] = datetime.now(timezone.utc)

        # Ensure there's an ID
        if 'id' not in structured_data or not structured_data['id']:
            # We can't use uuid here as it's not imported.
            # The id should be generated by the TimelineAgent.
            # We will rely on that.
            pass

        # Save to Firestore
        db = firestore_async.client()
        doc_ref = db.collection("timeline_events").document(structured_data['id'])
        await doc_ref.set(structured_data)

        print(f"Successfully saved event {structured_data['id']} to Firestore.")

        return f"Event '{structured_data.get('title')}' saved to timeline."

    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        return f"Failed to save to timeline: Invalid JSON format. {e}"
    except Exception as e:
        print(f"Error saving to Firestore: {e}")
        return f"Failed to save to timeline: {e}"
